name: Build & Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/suai-deadline-bot:latest
          docker build --pull -t $IMAGE .
          docker push $IMAGE

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DOCKER_SSH_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ secrets.DOCKER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on server
        run: |
          ssh ${{ secrets.DOCKER_USER }}@${{ secrets.DOCKER_HOST }} << 'EOF'
            set -e

            REPO_DIR="$HOME/suai-deadline-bot"
            CONTAINER_NAME="suai-bot-container"
            IMAGE="ghcr.io/${{ github.repository }}/suai-deadline-bot:latest"

            mkdir -p "$REPO_DIR"
            cd "$REPO_DIR"

            # Update env file
            printf "%s" "${{ secrets.ENV_FILE_CONTENT }}" > "$HOME/suai-deadline-bot/.env"

            # Pull latest image
            docker pull "$IMAGE"

            # Stop and remove old container if exists
            if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
              docker stop "$CONTAINER_NAME" || true
              docker rm "$CONTAINER_NAME" || true
            fi

            # Run new container
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              --env-file .env \
              -v "$REPO_DIR/src/database:/app/src/database" \
              "$IMAGE"
          EOF
