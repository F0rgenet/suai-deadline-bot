from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
import asyncio

from src.database.queries import add_user, set_user_credentials, update_user_deadlines
from src.bot.states import Registration
from src.parser.scraper import parse_deadlines_from_lk

from src.bot.keyboards import get_main_menu_keyboard, get_cancel_keyboard, get_profile_keyboard, get_confirm_delete_keyboard
from src.database.queries import (
    add_user, set_user_credentials, update_user_deadlines,
    get_user_deadlines_from_db, get_user_stats, delete_user_data
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ —Ñ–∞–π–ª–∞–º)
router = Router()

async def show_main_menu(message: types.Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())


@router.message(Command("cancel"))
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        await show_main_menu(message)
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(message)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ì–£–ê–ü. –ß—Ç–æ —è —É–º–µ—é:\n\n"
        "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –ø—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.\n"
        "‚úÖ –ü–æ –∫–æ–º–∞–Ω–¥–µ /status –∏–ª–∏ –∫–Ω–æ–ø–∫–µ <b>'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã'</b> –ø–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(help_text, parse_mode="HTML")


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ "/start" 
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    
    is_new = await add_user(telegram_id=message.from_user.id, username=message.from_user.username)

    if is_new:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ì–£–ê–ü.\n"
            "–í–∏–∂—É, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "[1Ô∏è‚É£/2Ô∏è‚É£] –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(Registration.waiting_for_login)
    else:
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø —É–∂–µ –∑–Ω–∞—é —Ç–µ–±—è!\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(Registration.waiting_for_login, F.text)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("[2Ô∏è‚É£/2Ô∏è‚É£] –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.")
    await state.set_state(Registration.waiting_for_password)

@router.message(Registration.waiting_for_password, F.text)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get('login')
    password = message.text

    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—ã—Ç–∞—é—Å—å –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...")

    # –í–ê–ñ–ù–û: –ü–∞—Ä—Å–µ—Ä - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç requests), –∞ –±–æ—Ç - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π.
    # –ß—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    loop = asyncio.get_event_loop()
    deadlines = await loop.run_in_executor(
        None, parse_deadlines_from_lk, login, password
    )

    if deadlines is None:
        await message.answer(
            "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ª–æ–≥–∏–Ω –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω.",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(Registration.waiting_for_login)
        return

    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await set_user_credentials(
        telegram_id=message.from_user.id,
        login=login,
        password=password
    )
    
    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer(
        "‚úÖÔ∏è–û—Ç–ª–∏—á–Ω–æ!\n"
        "üíæ–Ø —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n" 
        "ü§´–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞.",
        reply_markup=get_main_menu_keyboard() 
    ) 
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –≤ –ë–î
    if deadlines:
        await update_user_deadlines(message.from_user.id, deadlines)
    
    if deadlines:
        deadlines_text = "\n\n".join(
            [f"üìö <b>{d['subject']}</b>\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {d['task']}\n"
            f"üóìÔ∏è <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {d['due_date']}" for d in deadlines]
        )
        await message.answer(f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n{deadlines_text}", parse_mode="HTML")
    else:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é

# –ö–æ–º–∞–Ω–¥–∞ /status –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã"
@router.message(Command("status"))
@router.message(F.text == "üö® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
async def show_deadlines(message: types.Message):
    deadlines = await get_user_deadlines_from_db(message.from_user.id)
    if not deadlines:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –±–∞–∑–µ. "
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <u>—Ä–∞–∑ –≤ —á–∞—Å</u>.",
            parse_mode="HTML")
        return

    deadlines_text = "‚ú® <b>–í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n" 
    for d in deadlines:
        deadlines_text += (
            f"üìö <b>{d.course_name}</b>\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {d.task_name}\n"
            f"üóìÔ∏è <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {d.due_date.strftime('%d.%m.%Y')}\n\n"
        )
    await message.answer(deadlines_text, parse_mode="HTML")

# –ö–Ω–æ–ø–∫–∞ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    if not stats:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n" 
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: {stats.get('active_deadlines', 0)}\n"
        # f"–õ–∏—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: {stats.get('custom_deadlines', 0)}" # –¥–ª—è –±—É–¥—É—â–µ–≥–æ
    )
    await message.answer(profile_text, reply_markup=get_profile_keyboard(), parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("stop"))
async def cmd_stop(message: types.Message):
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b><u>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</u></b>.",
        reply_markup=get_confirm_delete_keyboard(),
        parse_mode="HTML"
    )

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback'–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)

@router.callback_query(F.data == "delete_my_data")
async def on_delete_data(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b><u>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</u></b>.",
        reply_markup=get_confirm_delete_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def on_confirm_delete(callback: CallbackQuery):
    deleted = await delete_user_data(callback.from_user.id)
    if deleted:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from aiogram.types import ReplyKeyboardRemove
        await callback.message.edit_text(
            "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã! –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å reply_markup
        await callback.bot.send_message(
            callback.from_user.id,
            "–í—ã –±—ã–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=None)
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def on_cancel_delete(callback: CallbackQuery):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (help, FSM) –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è,
# —á—Ç–æ –æ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é - get_main_menu_keyboard()