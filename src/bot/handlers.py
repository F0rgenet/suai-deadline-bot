from datetime import datetime
from typing import Union

from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest

from src.database.queries import (
    add_user, set_user_credentials, update_user_deadlines, add_custom_deadline,
    delete_deadline_by_id, toggle_notifications, update_notification_days,
    get_user_by_telegram_id, get_user_deadlines_from_db, get_user_stats,
    delete_user_data, set_notification_interval, get_deadline_by_id,
    delete_all_custom_deadlines
)
from src.bot.states import Registration, AddDeadline, SetNotificationInterval
from src.bot.filters import InStateFilter

from src.parser.scraper import parse_lk_data, _get_current_semester_id

from src.bot.keyboards import (
    get_main_menu_keyboard, get_cancel_keyboard, get_profile_keyboard,
    get_confirm_delete_keyboard, get_deadlines_settings_keyboard,
    get_notification_settings_keyboard, get_confirm_delete_deadline_keyboard,
    get_pagination_keyboard, get_confirm_delete_all_custom_keyboard
)

import asyncio

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–Ω—É–∂–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)
# –•–µ–Ω–¥–ª–µ—Ä - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã.
router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
PAGE_SIZE = 5


@router.message(InStateFilter(), F.text.in_({"üö® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã", "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤"}))
async def block_menu_in_state(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞), "
        "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π '‚ùå –û—Ç–º–µ–Ω–∞' (–∫–æ–º–∞–Ω–¥–∞ /cancel).",
    )


async def show_main_menu(message: types.Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())


@router.message(Command("cancel"))
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        await show_main_menu(message)
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(message)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ì–£–ê–ü. –ß—Ç–æ —è —É–º–µ—é:\n\n"
        "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –ø—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.\n"
        "‚úÖ –ü–æ –∫–æ–º–∞–Ω–¥–µ /status –∏–ª–∏ –∫–Ω–æ–ø–∫–µ <b>'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã'</b> –ø–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/status ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "/help ‚Äî C–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
        "/cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/stop ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"
    )
    await message.answer(help_text, parse_mode="HTML")


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ "/start"
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # /start –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–µ–¥—ë—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear() 

    is_new = await add_user(telegram_id=message.from_user.id, username=message.from_user.username)

    if is_new:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –ª–∫ –ì–£–ê–ü.\n"
            "ü•∏ –í–∏–∂—É, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
            "[1Ô∏è‚É£/2Ô∏è‚É£] –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω/–ø–æ—á—Ç—É –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(Registration.waiting_for_login)
    else:
        await message.answer(
            "üòä –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø —É–∂–µ –∑–Ω–∞—é —Ç–µ–±—è!\n"
            "üëá –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Registration.waiting_for_login, F.text)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("[2Ô∏è‚É£/2Ô∏è‚É£] –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.")
    await state.set_state(Registration.waiting_for_password)


@router.message(Registration.waiting_for_password, F.text)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get('login')
    password = message.text

    await message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    
    msg_to_delete = await message.answer("–ü—ã—Ç–∞—é—Å—å –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...")
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing") # –ü–æ–∫–∞–∑ "–ø–µ—á–∞—Ç–∞–µ—Ç..."

    # –ü–∞—Ä—Å–µ—Ä - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç requests), –∞ –±–æ—Ç - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π.
    # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.
    loop = asyncio.get_event_loop()
    parsed_data = await loop.run_in_executor(None, parse_lk_data, login, password)

    await msg_to_delete.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—ã—Ç–∞—é—Å—å –≤–æ–π—Ç–∏..."

    if parsed_data is None:
        await message.answer(
            "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ª–æ–≥–∏–Ω –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã.\n"
            "ü•¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(Registration.waiting_for_login)
        return

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    new_parsed_deadlines, profile_id, full_name = parsed_data

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    await set_user_credentials(
        telegram_id=message.from_user.id,
        login=login,
        password=password,
        profile_id=profile_id,
        full_name=full_name
    )

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.clear()
    await message.answer(
        "‚úÖÔ∏è –û—Ç–ª–∏—á–Ω–æ!\n"
        "üíæ –Ø —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "ü§´ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞.",
        reply_markup=get_main_menu_keyboard()
    )

    if new_parsed_deadlines:
        await update_user_deadlines(message.from_user.id, new_parsed_deadlines)
        deadlines_text = "\n\n".join(
            [f"üìö <b>{d['subject']}</b>\n"
             f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {d['task']}\n"
             f"üóìÔ∏è <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {d['due_date']}" for d in new_parsed_deadlines]
        )
        await message.answer(f"–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª:\n\n{deadlines_text}", parse_mode="HTML")
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")

# -------------------------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é

def format_deadlines_page(deadlines: list, page: int, page_size: int = 5) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–¥–ª–∞–π–Ω–æ–≤.
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —Å–ø–∏—Å–æ–∫ `deadlines` –Ω–µ –ø—É—Å—Ç–æ–π.
    """
    start_index = page * page_size
    end_index = start_index + page_size

    page_deadlines = deadlines[start_index:end_index]

    deadlines_text = "‚è≥ <b>–í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n"
    for i, d in enumerate(page_deadlines, start=start_index + 1):
        deadlines_text += (
            f"{i}.üìö <b>{d.course_name}</b>\n"
            f"   üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {d.task_name}\n"
            f"   üóìÔ∏è <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {d.due_date.strftime('%d.%m.%Y')}\n\n"
        )
    return deadlines_text


# –ö–æ–º–∞–Ω–¥–∞ "/status" –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã"
@router.message(Command("status"))
@router.message(F.text == "üö® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
async def show_deadlines(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–ï–†–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–¥–ª–∞–π–Ω–æ–≤."""
    deadlines = await get_user_deadlines_from_db(message.from_user.id)
    if not deadlines:
        await message.answer(
            "üï≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤ –±–∞–∑–µ.\n"
            "‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <u>—Ä–∞–∑ –≤ —á–∞—Å</u>.",
            parse_mode="HTML")
        return

    total_pages = (len(deadlines) + PAGE_SIZE - 1) // PAGE_SIZE
    page_text = format_deadlines_page(deadlines, page=0, page_size=PAGE_SIZE)

    await message.answer(
        page_text,
        reply_markup=get_pagination_keyboard(current_page=0, total_pages=total_pages),
        parse_mode="HTML"
    )


# –ö–Ω–æ–ø–∫–∞ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    user = await get_user_by_telegram_id(message.from_user.id)
    _, semester_name = _get_current_semester_id()

    if not stats or not user:
        await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return

    greeting = f"üë§ <b>{user.full_name}</b>" if user.full_name else "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>"

    if user.profile_id:
        profile_link = f"https://pro.guap.ru/inside/profile/{user.profile_id}"
        greeting += f"\nüîó ID –ø—Ä–æ—Ñ–∏–ª—è –ì–£–ê–ü: <a href='{profile_link}'>{user.profile_id}</a>"

    active_count = stats.get('active_deadlines', 0)
    custom_count = stats.get('custom_deadlines', 0)

    profile_text = (
        f"{greeting}\n\n"
        f"üéì –¢–µ–∫—É—â–∏–π —Å–µ–º–µ—Å—Ç—Ä: <b>{semester_name}</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: <b>{active_count}</b>"
    )
    if custom_count > 0:
        profile_text += f"\nüìå –∏–∑ –Ω–∏—Ö <i>–ª–∏—á–Ω—ã—Ö</i>: <b>{custom_count}</b>"

    await message.answer(
        profile_text, 
        reply_markup=get_profile_keyboard(custom_deadlines_count=custom_count),
        parse_mode="HTML"
    )


# –ö–æ–º–∞–Ω–¥–∞ "/stop" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("stop"))
async def cmd_stop(message: types.Message):
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b><u>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</u></b>.",
        reply_markup=get_confirm_delete_keyboard(),
        parse_mode="HTML"
    )


# –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
@router.message(F.text == "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
async def settings_notifications_menu(message: types.Message):
    user = await get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return

    await message.answer(
        "üîî –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_notification_settings_keyboard(user)
    )


async def update_notification_settings_menu(callback: CallbackQuery):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user = await get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_notification_settings_keyboard(user)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer()
        else:
            await callback.answer("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤"
@router.message(F.text == "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤")
async def settings_deadlines_menu(message: types.Message):
    deadlines = await get_user_deadlines_from_db(message.from_user.id)
    await message.answer(
        "üîß –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:\n"
        "–¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è.",
        reply_markup=get_deadlines_settings_keyboard(deadlines)
    )


# -------------------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback'–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)

@router.callback_query(F.data.startswith("page_"))
async def deadlines_page_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤.
    """
    page = int(callback.data.split("_")[1])

    deadlines = await get_user_deadlines_from_db(callback.from_user.id)
    if not deadlines:
        await callback.message.edit_text("üï≥ –î–µ–¥–ª–∞–π–Ω–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
        await callback.answer()
        return

    total_pages = (len(deadlines) + PAGE_SIZE - 1) // PAGE_SIZE
    page_text = format_deadlines_page(deadlines, page=page, page_size=PAGE_SIZE)

    await callback.message.edit_text(
        page_text,
        reply_markup=get_pagination_keyboard(current_page=page, total_pages=total_pages),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    """–ü—É—Å—Ç–æ–π —Ö—ç–Ω–¥–ª–µ—Ä, —á—Ç–æ–±—ã –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ –¥–µ–ª–∞–ª–æ –Ω–∏—á–µ–≥–æ."""
    await callback.answer()


@router.callback_query(F.data == "delete_my_data")
async def on_delete_data(callback: CallbackQuery):
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b><u>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</u></b>.",
        reply_markup=get_confirm_delete_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete")
async def on_confirm_delete(callback: CallbackQuery):
    deleted = await delete_user_data(callback.from_user.id)
    if deleted:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await callback.message.edit_text(
            "üöÆ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã! –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å reply_markup
        await callback.bot.send_message(
            callback.from_user.id,
            "üëã –í—ã –±—ã–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await callback.message.edit_text("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=None)
    await callback.answer()


@router.callback_query(F.data == "cancel_delete")
async def on_cancel_delete(callback: CallbackQuery):
    await callback.message.edit_text("‚ùï –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback.answer()


@router.callback_query(F.data.startswith("del_deadline_"))
async def delete_deadline_confirm_callback(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞.
    """
    deadline_id = int(callback.data.split("_")[2])
    deadline = await get_deadline_by_id(deadline_id)

    if not deadline:
        await callback.answer("–≠—Ç–æ—Ç –¥–µ–¥–ª–∞–π–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return

    text = (
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?\n\n"
        f"üìö <b>{deadline.course_name}</b>\n"
        f"üìù {deadline.task_name}\n"
        f"üóìÔ∏è {deadline.due_date.strftime('%d.%m.%Y')}"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_confirm_delete_deadline_keyboard(deadline_id),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_del_deadline_"))
async def confirm_delete_deadline_callback(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω.
    """
    deadline_id = int(callback.data.split("_")[3])
    await delete_deadline_by_id(deadline_id)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –∏—Å—á–µ–∑
    deadlines = await get_user_deadlines_from_db(callback.from_user.id)
    await callback.message.edit_text(
        "üöÆ –î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω. –í–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
        reply_markup=get_deadlines_settings_keyboard(deadlines)
    )
    await callback.answer(text="–£–¥–∞–ª–µ–Ω–æ!", show_alert=False)


@router.callback_query(F.data == "cancel_del_deadline")
async def cancel_delete_deadline_callback(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤.
    """
    deadlines = await get_user_deadlines_from_db(callback.from_user.id)
    await callback.message.edit_text(
        "‚ùï –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã —Å–Ω–æ–≤–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏.",
        reply_markup=get_deadlines_settings_keyboard(deadlines)
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main_from_settings")
async def back_to_main_menu_callback(callback: CallbackQuery):
    await callback.message.delete()
    await show_main_menu(callback.message)
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_callback(callback: CallbackQuery):
    await toggle_notifications(callback.from_user.id)
    await update_notification_settings_menu(callback)


@router.callback_query(F.data.startswith("toggle_day_"))
async def toggle_day_callback(callback: CallbackQuery):
    day = int(callback.data.split("_")[2])
    await update_notification_days(callback.from_user.id, day)
    await update_notification_settings_menu(callback)
    

@router.callback_query(F.data == "delete_all_custom")
async def on_delete_all_custom(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤."""
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b><u>–í–°–ï</u></b> –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=get_confirm_delete_all_custom_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete_all_custom")
async def on_confirm_delete_all_custom(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã."""
    await delete_all_custom_deadlines(callback.from_user.id)
    await callback.message.delete() # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.answer(
        "‚úÖ –í—Å–µ –≤–∞—à–∏ <b>–ª–∏—á–Ω—ã–µ</b> –¥–µ–¥–ª–∞–π–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã (–≤—É–∑–æ–≤—Å–∫–∏–µ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã).",
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_delete_all_custom")
async def on_cancel_delete_all_custom(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å."""
    await callback.message.delete() # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è
    await show_profile(callback.message)
    await callback.answer()

# -------------------------------------------------------------------------------------------
# FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


@router.callback_query(F.data == "set_interval")
async def set_interval_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úç –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö –¥–ª—è —á–∞—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "–∫–∞–∂–¥—ã–µ <u>—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤</u> –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "<i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <b>0</b>, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —á–∞—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</i>:",
        parse_mode="HTML"
    )
    await state.set_state(SetNotificationInterval.waiting_for_hours)
    await callback.answer()


@router.message(SetNotificationInterval.waiting_for_hours, F.text)
async def set_interval_hours(message: types.Message, state: FSMContext):
    try:
        hours = int(message.text)
        if not (0 <= hours <= 100):
            raise ValueError
    except ValueError:
        await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    await set_notification_interval(message.from_user.id, hours)
    await state.clear()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    user = await get_user_by_telegram_id(message.from_user.id)
    if user:
        await message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=get_notification_settings_keyboard(user)
        )

# -------------------------------------------------------------------------------------------
# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞


@router.message(Command("add"))
@router.callback_query(F.data == "add_deadline")
async def add_deadline_start(event: Union[types.Message, CallbackQuery], state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add, —Ç–∞–∫ –∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏.
    """
    text = "[1Ô∏è‚É£/3Ô∏è‚É£] –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
    if isinstance(event, types.Message):  # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add
        await event.answer(text, reply_markup=get_cancel_keyboard())
    elif isinstance(event, CallbackQuery):  # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        # –£–¥–∞–ª—è–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await event.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        await event.message.answer(text, reply_markup=get_cancel_keyboard())
        # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await event.answer()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await state.set_state(AddDeadline.waiting_for_course_name)


@router.message(AddDeadline.waiting_for_course_name, F.text)
async def add_deadline_course(message: types.Message, state: FSMContext):
    await state.update_data(course_name=message.text)
    await message.answer("[2Ô∏è‚É£/3Ô∏è‚É£] –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AddDeadline.waiting_for_task_name)


@router.message(AddDeadline.waiting_for_task_name, F.text)
async def add_deadline_task(message: types.Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("[3Ô∏è‚É£/3Ô∏è‚É£] –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025):")
    await state.set_state(AddDeadline.waiting_for_due_date)


@router.message(AddDeadline.waiting_for_due_date, F.text)
async def add_deadline_date(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y")

        if due_date.date() <= datetime.now().date():
            await message.answer("‚õîÔ∏è –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –Ω–∞ —É–∂–µ <u>–ø—Ä–æ—à–µ–¥—à—É—é</u> –∏–ª–∏ <u>—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é</u> –¥–∞—Ç—É.\n"
                                 "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è:", parse_mode="HTML")
            return  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–∂–∏–¥–∞—è –Ω–æ–≤—ã–π –≤–≤–æ–¥
    except ValueError:
        await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    user_data = await state.get_data()
    await add_custom_deadline(
        telegram_id=message.from_user.id,
        course=user_data.get("course_name"),
        task=user_data.get("task_name"),
        due_date=due_date
    )

    await state.clear()
    await message.answer("‚úÖ –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await show_main_menu(message)
