from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
import asyncio # –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ

from src.database.queries import add_user, set_user_credentials, update_user_deadlines
from src.bot.states import Registration
from src.parser.scraper import parse_deadlines_from_lk

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ —Ñ–∞–π–ª–∞–º)
router = Router()

# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ "/start" 
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    
    is_new = await add_user(telegram_id=message.from_user.id, username=message.from_user.username)

    if is_new:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ì–£–ê–ü.\n"
            "–í–∏–∂—É, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
        )
        await state.set_state(Registration.waiting_for_login)
    else:
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø —É–∂–µ –∑–Ω–∞—é —Ç–µ–±—è.\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏." # –î–æ–±–∞–≤–∏–º –∏—Ö –ø–æ–∑–∂–µ
        )

@router.message(Registration.waiting_for_login, F.text)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.")
    await state.set_state(Registration.waiting_for_password)

@router.message(Registration.waiting_for_password, F.text)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get('login')
    password = message.text

    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—ã—Ç–∞—é—Å—å –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...")

    # –í–ê–ñ–ù–û: –ü–∞—Ä—Å–µ—Ä - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç requests), –∞ –±–æ—Ç - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π.
    # –ß—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    loop = asyncio.get_event_loop()
    deadlines = await loop.run_in_executor(
        None, parse_deadlines_from_lk, login, password
    )

    if deadlines is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ª–æ–≥–∏–Ω –∏/–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω."
        )
        await state.set_state(Registration.waiting_for_login)
        return

    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await set_user_credentials(
        telegram_id=message.from_user.id,
        login=login,
        password=password
    )
    
    await state.clear() # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n" 
        "–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞."
    ) 
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –≤ –ë–î
    if deadlines:
        await update_user_deadlines(message.from_user.id, deadlines)
    
    if deadlines:
        deadlines_text = "\n\n".join(
            [f"üìö <b>{d['subject']}</b>\n"
            f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {d['task']}\n"
            f"üóìÔ∏è <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {d['due_date']}" for d in deadlines]
        )
        await message.answer(f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n{deadlines_text}", parse_mode="HTML")
    else:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")